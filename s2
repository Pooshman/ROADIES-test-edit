import glob
from collections import OrderedDict
import random
SAMPLES = glob_wildcards(config["PATH"]+"/{samples}.fa").samples
od = OrderedDict([(key,0) for key in SAMPLES])
num=config["KREG"]
num_genomes = len(SAMPLES)
for i in range(num):
    index = random.randint(0,num_genomes-1)
    od[SAMPLES[index]] = od[SAMPLES[index]]+1
index = 1
def get_index(wildcards): 
	global index
	k = od[wildcards]
	if k == 0:
		return (index,index)
	start = index
	end = index+k-1
	print(index,k,start,end)
	index = end +1
	print(index)
	return (start,end)
id = list(range(1,num+1))

rule all:
    input:expand(config["OUT"]+"/genes/gene_{ids}.fa",ids=id)	
rule get_genes:
	input:
		config["OUT"]+"/genes/temp.txt"
	output:
		config["OUT"]+"/genes/gene_{id}.fa"
rule lastztofasta:
	input:
		expand(config["OUT"]+"/alignments/{sample}.maf",sample=SAMPLES),
	params:
		p = config["OUT"]+"/alignments",
		o = config["OUT"]+"/genes",
		k = config["KREG"]
	output:
		temp(config["OUT"]+"/genes/temp.txt")
	shell:
		"""
		python lastz_align/lastz2fasta.py {params.p} {params.o} {params.k}
		touch {output}
		"""
rule lastz:
	input:
		config["OUT"]+"/samples/out.fasta",
		config["PATH"]+"/{sample}.fa"
	output:
		config["OUT"]+"/alignments/{sample}.maf"
	shell:
		"lastz_32 {input[1]}[multiple] {input[0]}[multiple] --filter=coverage:70 --filter=identity:70 --step=20 --format=maf --output={output}"

rule sequence_merge:
    input:
        expand(config["OUT"]+"/samples/{sample}_temp.fa", sample=SAMPLES),
	dir = config["OUT"]
    output:
        config["OUT"]+"/samples/out.fasta"
    shell:
       """
	cat {input.dir}/samples/*.fa >> {output}
	sed -i '/^$/d' {output}
	"""
rule sequence_select:
    input:
        config["PATH"]+"/{sample}.fa"
    params:
        LENGTH=config["LENGTH"],
        KFAC=lambda wildcards: get_index(wildcards.sample),
	R = config["RERUNS"],
	T = config["THRESHOLD"],
	K = config["KREG"]
    output:
        temp(config["OUT"]+"/samples/{sample}_temp.fa")
    shell:
        "python sequence_select/test.py --input {input[0]} -k {params.K} -s {params.KFAC[0]} -e {params.KFAC[1]} -l {params.LENGTH} -r {params.R} -t {params.T} --output {output}"
